version: 2.1
orbs:
  slack: circleci/slack@4.1
  
  slack-notify-success-job: &slack-notify-success-job
    event: pass
    template: basic_success_1
    
  slack-notify-failed-job: &slack-notify-failed-job
    event: fail
    mentions: '@dev'
    template: basic_fail_1
    
  slack-notify-success-deploy: &slack-notify-success-deploy
    event: pass
    template: success_tagged_deploy_1

  slack-notify-failed-deploy: &slack-notify-failed-deploy
    event: fail
    mentions: '@dev'
    template: basic_fail_1
  
commands:
  destroy-environment:
    parameters:
      workflowId:
        type: string
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name server-<<parameters.workflowId>>
            
jobs:
  test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [dependencies]
      - run:
          name: Test artifact
          command: |
            export NODE_ENV=dev
            make install
            make test
      - save_cache:
          paths: [node_modules]
          key: dependencies
      - slack/notify: *slack-notify-failed-job
      
  scan:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan code
          command: |
            npm audit
      - slack/notify: *slack-notify-failed-job
      
  lint:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ dependencies ]
      - run:
          name: Lint Js and Dockerfile
          command: |
            echo $(which node)
            make install
            wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /usr/local/bin/hadolint
            export NODE_ENV=dev
            make lint
      - slack/notify: *slack-notify-failed-job
  
  create-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure infrascture exist
          command: |
            aws cloudformation deploy \
              --template-file iac/server.yml \
              --tags name=capstone \
              --stack-name server-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=capstone-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> ansible/inventory.txt
      - run:
          name: Install tar gzip utility
          command: |
            yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/ansible/inventory.txt
      - destroy-environment:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify: *slack-notify-failed-job
      
  deploy-artifact:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["11:d0:c0:4d:1e:98:da:33:6a:ba:d9:c7:aa:bd:81:8a"]
      - run:
          name: Install dependencies
          command: |
            apk add --update curl ansible tar gzip zip unzip
            pip install awscli
      - run:
          name: Configure server
          command: |
            echo NODE_ENV=production > ".env"
            echo APP_PORT=$APP_PORT >> ".env"
            echo VERSION=$APP_VERSION >> ".env"
            echo DB_HOST=$DB_HOST >> ".env"
            echo DB_PORT=$DB_PORT >> ".env"
            echo DB_USER=$DB_USER >> ".env"
            echo DB_PASSWORD=$DB_PASSWORD >> ".env"
            echo DB_NAME=$DB_NAME >> ".env"
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ansible/inventory.txt ansible/configure-server.yml
      - run:
          name: Start Application
          command: |
            # zip the artifact
            zip -r app.zip .
            # start application
            ansible-playbook -i ansible/inventory.txt ansible/start-application.yml
      - destroy-environment:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify: *slack-notify-failed-job

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add curl
            pip install awscli
      - run:
          name: Run smoke test
          command: |
            export APP_URL=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --filters "Name=tag:Name,Values=capstone-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            echo $APP_URL
            if curl -s ${APP_URL}
            then
              echo "App is working"
              return 0
            then
              echo "App is not working"
            fi
      - destroy-environment:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify: *slack-notify-failed-job
      
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id and delete stack
          command: |
            yum -y install tar gzip
            export workflowId=$(aws cloudformation list-exports \
              --query "Exports[?Name=='WorkflowID'].Value" \
              --no-paginate --output text)
  
            echo OldWorkflowID: "$OldWorkflowID"
workflows:
  default:
    jobs:
      #- test
      #- scan:
      #    requires: [test]
      #- lint:
      #    requires: [test]
      - create-infrastructure
      #    requires: [lint]
      - deploy-artifact:
          requires: [create-infrastructure]
      - smoke-test:
          requires: [deploy-artifact]
      - cleanup:
          requires: [smoke-test]