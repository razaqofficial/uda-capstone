version: 2.1
orbs:
  slack: circleci/slack@4.1
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.12.0

commands:
  destroy-environment:
    parameters:
      workflowId:
        type: string
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name server-<<parameters.workflowId>>
  
  save-to-memstash:
    parameters:
      KeyName:
        type: string
      KeyValue:
        type: string
    steps:
      - run:
          name: Save to memstash
          command: |
            curl -H "Content-Type: text/plain" \
              -H "token: ${MEMSTASH_TOKEN}" --request PUT \
              --data "<<parameters.KeyValue>>" https://api.memstash.io/values/<<parameters.KeyName>>
  
 
jobs:
  test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [dependencies]
      - run:
          name: Test artifact
          command: |
            export NODE_ENV=dev
            make install
            make test
      - save_cache:
          paths: [node_modules]
          key: dependencies
      - slack/notify:
          event: fail
          mentions: '@dev'
          template: basic_fail_1
  
  scan:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan code
          command: |
            npm audit
      - slack/notify:
          event: fail
          mentions: '@dev'
          template: basic_fail_1
  
  lint:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - restore_cache:
          keys: [ dependencies ]
      - run:
          name: Lint Js and Dockerfile
          command: |
            apk add --update nodejs npm
            export NODE_ENV=dev
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
            export NODE_ENV=dev
            npm install --only=dev
            npm run lint
            hadolint --ignore DL3042 --ignore DL3000 --ignore DL3018 Dockerfile
      - slack/notify:
          event: fail
          mentions: '@dev'
          template: basic_fail_1
  
  build-project:
    machine: true
    steps:
      - checkout
      - run:
          name: Docker build and push
          command: |
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
            echo NODE_ENV=production > ".env"
            echo APP_PORT=$APP_PORT >> ".env"
            echo VERSION=$APP_VERSION >> ".env"
            echo DB_HOST=$DB_HOST >> ".env"
            echo DB_PORT=$DB_PORT >> ".env"
            echo DB_USER=$DB_USER >> ".env"
            echo DB_PASSWORD=$DB_PASSWORD >> ".env"
            echo DB_NAME=$DB_NAME >> ".env"
      - run: docker build -t razaqofficial/capstone:latest .
      - run: docker push razaqofficial/capstone:latest
  
  #k8s jobs
  create-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''
          
  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/capstone-deployment
  
  #k8s job ends

workflows:
  default:
    jobs:
     #- test
     #- scan:
     #    requires: [test]
     #- lint:
     #    requires: [test]
     #- build-project:
     #    requires: [lint]
     #- create-cluster:
     #    cluster-name: capstone-app
     #    requires: [build-project]
      - create-deployment:
          cluster-name: capstone-app
      - aws-eks/update-container-image:
          cluster-name: capstone-app
          container-image-updates: "capstone-deployment=razaqofficial/capstone:latest"
          get-rollout-status: true
          record: true
          resource-name: deployment/capstone-deployment
          requires: [create-deployment]